package com.proxmox.ipset;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;

@Service
@Transactional
public class IpSetService {

	@Value("${proxmox.api.url}")
	private String proxmoxApiUrl;

	@Value("${proxmox.token.id}")
	private String tokenId;

	@Value("${proxmox.token.secret}")
	private String tokenSecret;

	@Autowired
	private IpsetRepo repo; // Assuming you have an IpSetRepo for database operations

	public ResponseEntity<String> createIpSetNew(IpsetNew ipnew) {

		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "PVEAPIToken=" + tokenId + "=" + tokenSecret);
		headers.setContentType(MediaType.APPLICATION_JSON);

		Map<String, Object> payload = new HashMap<>();
		payload.put("name", ipnew.getName());
		payload.put("comment", ipnew.getComment());

		ObjectMapper objectMapper = new ObjectMapper();
		String jsonPayload;
		try {
			jsonPayload = objectMapper.writeValueAsString(payload);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error serializing request body: " + e.getMessage());
		}

		headers.setContentLength(jsonPayload.getBytes(StandardCharsets.UTF_8).length);

		// Define the API endpoint for creating an IP set
		String url = String.format("%s/cluster/firewall/ipset/", proxmoxApiUrl);
		RestTemplate restTemplate = new RestTemplate();
		HttpEntity<String> request = new HttpEntity<>(jsonPayload, headers);

		try {
			// Make the API call to Proxmox to create the IP set
			ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

			// Check the response status and handle success or failure
			if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {
				// Save the IP set to the database (ID is auto-generated by JPA)
				repo.save(ipnew);
				return ResponseEntity.ok("IPSet for DataCenter created successfully: " + response.getBody());
			} else {
				return ResponseEntity.status(response.getStatusCode()).body("Failed to create IP Set. Status: "
						+ response.getStatusCode() + ", Body: " + response.getBody());
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error occurred: " + e.getMessage());
		}
	}

	@Autowired
	private RestTemplate restTemplate; // Assuming RestTemplate is configured as a Spring bean

	public ResponseEntity<String> createVmIPsets(VmIPsets vmIPsets) {
		// Set up headers for the API request
		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "PVEAPIToken=" + tokenId + "=" + tokenSecret);
		headers.setContentType(MediaType.APPLICATION_JSON);

		// Construct the payload for creating an IP set
		Map<String, Object> payload = new HashMap<>();
		payload.put("name", vmIPsets.getName());
		payload.put("node", vmIPsets.getNode());
		payload.put("vmid", vmIPsets.getVmid());
		payload.put("comment", vmIPsets.getComment());

		// Serialize the payload to JSON
		ObjectMapper objectMapper = new ObjectMapper();
		String jsonPayload;
		try {
			jsonPayload = objectMapper.writeValueAsString(payload);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error serializing request body: " + e.getMessage());
		}

		// Define the API endpoint URL
		String url = String.format("%s/nodes/%s/qemu/%s/firewall/ipset", proxmoxApiUrl, vmIPsets.getNode(),
				vmIPsets.getVmid());

		HttpEntity<String> request = new HttpEntity<>(jsonPayload, headers);

		try {
			// Make the API call to Proxmox to create the IP set
			ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

			// Check the response status and handle success or failure
			if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {
				return ResponseEntity.ok("IPsets for particular VM  created successfully: " + response.getBody());
			} else {
				return ResponseEntity.status(response.getStatusCode()).body("Failed to create IP Set. Status: "
						+ response.getStatusCode() + ", Body: " + response.getBody());
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error occurred while calling Proxmox API: " + e.getMessage());
		}
	}

	public ResponseEntity<String> createVmIPsetsCidr(VmIPsets vmIPsets) {
		// Set up headers for the API request
		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "PVEAPIToken=" + tokenId + "=" + tokenSecret);
		headers.setContentType(MediaType.APPLICATION_JSON);

		// Construct the payload for creating an IP set
		Map<String, Object> payload = new HashMap<>();
		payload.put("cidr", vmIPsets.getCidr()); // Add CIDR to the payload
		payload.put("comment", vmIPsets.getComment());

		// Serialize the payload to JSON
		ObjectMapper objectMapper = new ObjectMapper();
		String jsonPayload;
		try {
			jsonPayload = objectMapper.writeValueAsString(payload);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error serializing request body: " + e.getMessage());
		}

		// Define the API endpoint URL with CIDR in the path
		String url = String.format("%s/nodes/%s/qemu/%s/firewall/ipset/%s", proxmoxApiUrl, vmIPsets.getNode(),
				vmIPsets.getVmid(), vmIPsets.getName()); // Use name as part of URL

		HttpEntity<String> request = new HttpEntity<>(jsonPayload, headers);

		try {
			// Make the API call to Proxmox to create the IP set
			ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

			// Check the response status and handle success or failure
			if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {
				return ResponseEntity.ok("CIDR of particular VM's IPsets  created successfully: " + response.getBody());
			} else {
				return ResponseEntity.status(response.getStatusCode()).body("Failed to create IP Set. Status: "
						+ response.getStatusCode() + ", Body: " + response.getBody());
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error occurred while calling Proxmox API: " + e.getMessage());
		}
	}

	public ResponseEntity<String> createIpSet(IpsetNew ipSetDetails) {
		// Long generatedId = generateId();
		// ipSetDetails.setId(generatedId); // Assuming IpSet has an ID field

		HttpHeaders headers = new HttpHeaders();
		headers.add("Authorization", "PVEAPIToken=" + tokenId + "=" + tokenSecret);
		headers.setContentType(MediaType.APPLICATION_JSON);

		// Construct the payload for creating an IP set
		Map<String, Object> payload = new HashMap<>();
		payload.put("cidr", ipSetDetails.getCidr());
		payload.put("name", ipSetDetails.getName());
		if (ipSetDetails.getComment() != null) {
			payload.put("comment", ipSetDetails.getComment());
		}
//        if (ipSetDetails.getNoMatch() != null) {
//            payload.put("nomatch", ipSetDetails.getNoMatch());
//        }

		// Serialize the payload to JSON
		ObjectMapper objectMapper = new ObjectMapper();
		String jsonPayload;
		try {
			jsonPayload = objectMapper.writeValueAsString(payload);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Error serializing request body: " + e.getMessage());
		}

		headers.setContentLength(jsonPayload.getBytes(StandardCharsets.UTF_8).length);

		// Define the API endpoint for creating an IP set
		String url = String.format("%s/cluster/firewall/ipset/%s", proxmoxApiUrl, ipSetDetails.getName());
		RestTemplate restTemplate = new RestTemplate();
		HttpEntity<String> request = new HttpEntity<>(jsonPayload, headers);

		try {
			// Make the API call to Proxmox to create the IP set
			ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);

			// Check the response status and handle success or failure
			if (response.getStatusCode() == HttpStatus.OK || response.getStatusCode() == HttpStatus.CREATED) {
				// Save the IP set to the database (ID is auto-generated by JPA)
				repo.save(ipSetDetails);
				return ResponseEntity
						.ok("CIDR for DataCenter IPsets  created successfully with cidr :" + response.getBody());
			} else {
				return ResponseEntity.status(response.getStatusCode()).body("Failed to create IP Set. Status: "
						+ response.getStatusCode() + ", Body: " + response.getBody());
			}

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error occurred: " + e.getMessage());
		}
	}
}
